#! C:/Program Files/Nuke11.0v1/nuke-11.0.1.dll -nx
version 11.0 v1
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="-4" y="-4" w="1920" h="1017" maximized="1" screen="0">
        <splitter orientation="2">
            <split size="973"/>
            <dock id="" activePageId="DAG.1" focus="true">
                <page id="DAG.1"/>
                <page id="Curve Editor.1"/>
                <page id="DopeSheet.1"/>
            </dock>
        </splitter>
    </window>
    <window x="-1924" y="0" w="1920" h="1064" maximized="1" screen="1">
        <splitter orientation="2">
            <split size="1064"/>
            <dock id="" activePageId="Viewer.1">
                <page id="Viewer.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name D:/Factory/Software/util/nuke/pixelbucket/nodes/camera_projection_v1.0.nk
 format "1920 1080 0 0 1920 1080 1 HD_1080"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
Camera2 {
 inputs 0
 name Camera1
 selected true
 xpos -56
 ypos -366
 addUserKnob {20 camera_projection l "Camera Projection"}
 addUserKnob {52 sturtup T "nuke.thisNode()\[\"proj_set\"].execute()" +STARTLINE}
 addUserKnob {22 proj_set l INVISIBLE +INVISIBLE T "def set_projection(has_proj):\n    \"\"\"Enable or disable projection setup depending on has_proj argument\n\n    Args:\n        has_proj (bool): if true set projection, else remove\n    \"\"\"\n\n    camera=nuke.thisNode()\n\n    # change data values when changing knob values\n    if has_proj:\n        data =\{\"remove_projection\": True,\n               \"create_projection\": False,\n               \"tile_color\": 7208959\}\n    else:\n        data = \{\"remove_projection\": False,\n               \"create_projection\": True,\n               \"tile_color\": 0\}\n\n    # button visibility and color\n    camera\[\"remove_projection\"].setVisible(data\[\"remove_projection\"])\n    camera\[\"create_projection\"].setVisible(data\[\"create_projection\"])\n    camera\[\"tile_color\"].setValue(data\[\"tile_color\"])\n\n    # proj knob visibility\n    knobs = \[\"projection_frame\"]\n    for knob in knobs:\n        camera\[knob].setVisible(has_proj)\n\n    # create proj nodes\n    if has_proj:\n        # frame hold for camera\n        holdCam = nuke.nodes.FrameHold()\n        holdCam.setInput(0,camera)\n        holdCam.setXYpos(int(camera.xpos()),\n                         int(camera.ypos())+150)\n        holdCam\[\"first_frame\"].setExpression(\n            \"parent.\{\}.knob.projection_frame\".format(camera.name()))\n        holdCam\[\"tile_color\"].setValue(int(892686847))\n        append_id_knob(id(camera), holdCam)\n\n        # frame hold for footage\n        holdCam.selectOnly()\n        nukescripts.node_copypaste()\n        holdSrc=nuke.selectedNode()\n        holdSrc.setXYpos(int(camera.xpos())+150,\n                         int(camera.ypos())+100)\n\n        # create project 3D\n        project3d=nuke.nodes.Project3D2()\n        project3d.setInput(0, holdSrc)\n        project3d.setInput(1, holdCam)\n        project3d.setXYpos(int(holdSrc.xpos()),\n                         int(holdSrc.ypos())+50)\n        project3d\[\"tile_color\"].setValue(int(892686847))\n        append_id_knob(id(camera), project3d)\n\n        # set projection frame to current frame\n        camera\[\"projection_frame\"].setValue(nuke.frame())\n\n    else:\n        for node in nuke.allNodes():\n            cam_id_knob=node.knobs().get(\"cam_id\")\n            if cam_id_knob and cam_id_knob.value() == str(id(camera)):\n                nuke.delete(node)\n\n# function to add camera nodes id to all other nodes\ndef append_id_knob(id_, target_node):\n    id_knob = nuke.Text_Knob(\"cam_id\", \"cam_id\", str(id_))\n    id_knob.setVisible(False)\n    target_node.addKnob(id_knob)" +STARTLINE}
 addUserKnob {22 create_projection l "Create Projection" T set_projection(True) +STARTLINE}
 addUserKnob {22 remove_projection l "Remove Projection" -STARTLINE +HIDDEN T set_projection(False)}
 addUserKnob {3 projection_frame l "          Frame" -STARTLINE +HIDDEN}
 projection_frame 1
}
